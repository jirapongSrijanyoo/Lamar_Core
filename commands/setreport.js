const { SlashCommandBuilder, EmbedBuilder, ChannelType, PermissionFlagsBits } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { loginfo, logwarn, logerror, logdebug } = require('../utils/logger');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('set_report_channel')
        .setDescription('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'),

    async execute(interaction) {
        const guild = interaction.guild;
        const guildId = guild.id;
        const serverFilePath = path.join(__dirname, '..', 'discord_server', `${guildId}.json`);

        try {
            let serverData = {};
            if (fs.existsSync(serverFilePath)) {
                serverData = JSON.parse(fs.readFileSync(serverFilePath, 'utf-8'));
            }

            const adminIds = serverData.admin || [];

            // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå: ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏µ permission Administrator ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list admin
            const isOwner = interaction.user.id === guild.ownerId;
            const isAdminUser = adminIds.includes(interaction.user.id);
            const hasAdminPermission = interaction.member.permissions.has(PermissionFlagsBits.Administrator);

            if (!isOwner && !isAdminUser && !hasAdminPermission) {
                logwarn(`User ${interaction.user.tag} unauthorized to run /set_report_channel`);
                return interaction.reply('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            const channelsToCreate = [
                { name: '‚îÇ„Éªüìò‚Å∫„ÄÇrole-add', reason: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° role', key: 'roleAddChannelId' },
                { name: '‚îÇ„Éªüìò‚Å∫„ÄÇrole-remove', reason: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö role', key: 'roleRemoveChannelId' },
                { name: '‚îÇ„Éªüìò‚Å∫„ÄÇùë©ùë®ùëµ', reason: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', key: 'banChannelId' },
            ];

            const createdChannels = [];

            for (const ch of channelsToCreate) {
                const channel = await guild.channels.create({
                    name: ch.name,
                    type: ChannelType.GuildText,
                    reason: ch.reason,
                    permissionOverwrites: [
                        {
                            id: guild.id,
                            deny: [PermissionFlagsBits.ViewChannel],
                        },
                        // ‚úÖ ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô list admin (userId) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
                        ...adminIds.map(id => ({
                            id,
                            allow: [PermissionFlagsBits.ViewChannel],
                        }))
                    ],
                });

                serverData[ch.key] = channel.id;
                createdChannels.push({ name: ch.name, id: channel.id });
            }

            fs.writeFileSync(serverFilePath, JSON.stringify(serverData, null, 2));

            const embed = new EmbedBuilder()
                .setColor('#d6a3ff')
                .setTitle('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                .setDescription(createdChannels.map(c => `- ${c.name}: <#${c.id}>`).join('\n'))
                .setTimestamp()
                .setFooter({
                    text: `‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ ${interaction.user.username}`,
                    iconURL: interaction.user.displayAvatarURL(),
                });

            await interaction.reply({ embeds: [embed] });

            loginfo(`[${guild.name}] ${interaction.user.tag} ‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

        } catch (error) {
            logerror(`Error in /set_report_channel for guild ${guildId}: ${error.message}`);
            return interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral: true });
        }
    }
};
